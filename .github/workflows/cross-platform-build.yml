name: Cross-Platform Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Minimal token permissions for build/test
permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libxkbcommon-dev

    - name: Run tests (CLI only)
      run: cargo test --all --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt --all -- --check

    # GUI/e2e tests removed; CLI only

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rolypoly
            asset_name: rolypoly-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rolypoly.exe
            asset_name: rolypoly-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rolypoly
            asset_name: rolypoly-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rolypoly
            asset_name: rolypoly-macos-aarch64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libxkbcommon-dev

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create application bundle (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p RolyPoly.app/Contents/MacOS
        mkdir -p RolyPoly.app/Contents/Resources
        cp target/${{ matrix.target }}/release/rolypoly RolyPoly.app/Contents/MacOS/
        cp icons/icon.icns RolyPoly.app/Contents/Resources/
        cat > RolyPoly.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>rolypoly</string>
          <key>CFBundleIdentifier</key>
          <string>com.rolypoly.archiver</string>
          <key>CFBundleName</key>
          <string>RolyPoly</string>
          <key>CFBundleVersion</key>
          <string>1.0</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0</string>
          <key>CFBundleIconFile</key>
          <string>icon.icns</string>
          <key>LSMinimumSystemVersion</key>
          <string>10.14</string>
        </dict>
        </plist>
        EOF

    - name: Create Windows installer
      if: matrix.os == 'windows-latest'
      run: |
        # Create a simple batch installer
        echo '@echo off' > install.bat
        echo 'echo Installing Rusty...' >> install.bat
        echo 'copy rusty.exe "%ProgramFiles%\Rusty\rusty.exe"' >> install.bat
        echo 'echo Installation complete!' >> install.bat
        cp target/${{ matrix.target }}/release/rusty.exe .

    - name: Create Linux AppImage
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Create AppDir structure
        mkdir -p RolyPoly.AppDir/usr/bin
        mkdir -p RolyPoly.AppDir/usr/share/applications
        mkdir -p RolyPoly.AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy binary
        cp target/${{ matrix.target }}/release/rolypoly RolyPoly.AppDir/usr/bin/
        
        # Create desktop file
        cat > RolyPoly.AppDir/usr/share/applications/rolypoly.desktop << 'EOF'
        [Desktop Entry]
        Name=RolyPoly
        Exec=rolypoly
        Icon=rolypoly
        Type=Application
        Categories=Utility;Archiving;
        Comment=Modern ZIP archiver
        EOF
        
        # Copy icon
        cp icons/icon.png RolyPoly.AppDir/usr/share/icons/hicolor/256x256/apps/rolypoly.png
        
        # Create AppRun
        cat > RolyPoly.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        exec "${HERE}/usr/bin/rolypoly" "$@"
        EOF
        chmod +x Rusty.AppDir/AppRun

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          RolyPoly.app/
          RolyPoly.AppDir/
          install.bat
          rolypoly.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          rusty-linux-x86_64/*
          rusty-windows-x86_64.exe/*
          rusty-macos-x86_64/*
          rusty-macos-aarch64/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
